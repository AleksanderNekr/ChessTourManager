// <auto-generated />

#nullable disable

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;

namespace ChessTourManager.DataAccess.Data.Migrations
{
    [DbContext(typeof(ChessTourContext))]
    [Migration("20230516070122_AddedTeamsController")]
    partial class AddedTeamsController
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChessTourManager.DataAccess.Entities.Game", b =>
                {
                    b.Property<int>("WhiteId")
                        .HasColumnType("integer")
                        .HasColumnName("white_id");

                    b.Property<int>("BlackId")
                        .HasColumnType("integer")
                        .HasColumnName("black_id");

                    b.Property<int>("TournamentId")
                        .HasColumnType("integer")
                        .HasColumnName("tournament_id");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("integer")
                        .HasColumnName("organizer_id");

                    b.Property<double>("BlackPoints")
                        .HasColumnType("double precision")
                        .HasColumnName("black_points");

                    b.Property<bool>("IsPlayed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_played");

                    b.Property<int>("TourNumber")
                        .HasColumnType("integer")
                        .HasColumnName("tour_number");

                    b.Property<double>("WhitePoints")
                        .HasColumnType("double precision")
                        .HasColumnName("white_points");

                    b.HasKey("WhiteId", "BlackId", "TournamentId", "OrganizerId")
                        .HasName("games_pk");

                    b.HasIndex("BlackId", "TournamentId", "OrganizerId");

                    b.HasIndex("WhiteId", "TournamentId", "OrganizerId");

                    b.HasIndex(new[] { "WhiteId", "BlackId", "TournamentId", "OrganizerId", "TourNumber" }, "games_tour_number_uq")
                        .IsUnique();

                    b.ToTable("games", (string)null);
                });

            modelBuilder.Entity("ChessTourManager.DataAccess.Entities.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GroupId"));

                    b.Property<int>("TournamentId")
                        .HasColumnType("integer")
                        .HasColumnName("tournament_id");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("integer")
                        .HasColumnName("organizer_id");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("group_name")
                        .HasDefaultValueSql("'1'::character varying");

                    b.Property<string>("Identity")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4)
                        .HasColumnType("character(4)")
                        .HasColumnName("identity")
                        .HasDefaultValueSql("'1'::bpchar")
                        .IsFixedLength();

                    b.HasKey("GroupId", "TournamentId", "OrganizerId")
                        .HasName("groups_pk");

                    b.HasIndex(new[] { "TournamentId", "OrganizerId", "GroupName" }, "group_name_uq")
                        .IsUnique();

                    b.HasIndex(new[] { "TournamentId", "OrganizerId", "Identity" }, "identity_uq")
                        .IsUnique();

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("ChessTourManager.DataAccess.Entities.Kind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("kind_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("kind_name");

                    b.HasKey("Id")
                        .HasName("kinds_pk");

                    b.HasIndex(new[] { "Name" }, "kinds_name_uq")
                        .IsUnique();

                    b.ToTable("kinds", (string)null);
                });

            modelBuilder.Entity("ChessTourManager.DataAccess.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("player_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("TournamentId")
                        .HasColumnType("integer")
                        .HasColumnName("tournament_id");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("integer")
                        .HasColumnName("organizer_id");

                    b.Property<int>("BoardNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("board_number")
                        .HasDefaultValueSql("1");

                    b.Property<int>("DrawsCount")
                        .HasColumnType("integer")
                        .HasColumnName("draws_count");

                    b.Property<char>("Gender")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("gender");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("true");

                    b.Property<int>("LossesCount")
                        .HasColumnType("integer")
                        .HasColumnName("losses_count");

                    b.Property<string>("PlayerAttribute")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("character(3)")
                        .HasColumnName("player_attribute")
                        .HasDefaultValueSql("'   '::bpchar")
                        .IsFixedLength();

                    b.Property<int>("PlayerBirthYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("player_birth_year")
                        .HasDefaultValueSql("EXTRACT(year FROM now())");

                    b.Property<string>("PlayerFirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("player_first_name");

                    b.Property<string>("PlayerLastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("player_last_name");

                    b.Property<double>("PointsAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("points_count");

                    b.Property<decimal>("RatioSum1")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("ratio_sum1");

                    b.Property<decimal>("RatioSum2")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("ratio_sum2");

                    b.Property<int?>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("team_id");

                    b.Property<int>("WinsCount")
                        .HasColumnType("integer")
                        .HasColumnName("wins_count");

                    b.HasKey("Id", "TournamentId", "OrganizerId")
                        .HasName("players_pk");

                    b.HasIndex("TournamentId", "OrganizerId");

                    b.HasIndex("GroupId", "TournamentId", "OrganizerId");

                    b.HasIndex("TeamId", "OrganizerId", "TournamentId");

                    b.HasIndex(new[] { "Id", "TournamentId", "PlayerLastName", "PlayerFirstName", "PlayerAttribute" }, "players_name_attr_uq")
                        .IsUnique();

                    b.ToTable("players", (string)null);
                });

            modelBuilder.Entity("ChessTourManager.DataAccess.Entities.Ratio", b =>
                {
                    b.Property<int>("RatioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ratio_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RatioId"));

                    b.Property<string>("RatioName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ratio_name");

                    b.HasKey("RatioId")
                        .HasName("ratios_pk");

                    b.HasIndex(new[] { "RatioName" }, "ratios_name_uq")
                        .IsUnique();

                    b.ToTable("ratios", (string)null);
                });

            modelBuilder.Entity("ChessTourManager.DataAccess.Entities.System", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("system_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("system_name");

                    b.HasKey("Id")
                        .HasName("systems_pk");

                    b.HasIndex(new[] { "Name" }, "systems_name_uq")
                        .IsUnique();

                    b.ToTable("systems", (string)null);
                });

            modelBuilder.Entity("ChessTourManager.DataAccess.Entities.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("team_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TeamId"));

                    b.Property<int>("OrganizerId")
                        .HasColumnType("integer")
                        .HasColumnName("organizer_id");

                    b.Property<int>("TournamentId")
                        .HasColumnType("integer")
                        .HasColumnName("tournament_id");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("true");

                    b.Property<string>("TeamAttribute")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("character(3)")
                        .HasColumnName("team_attribute")
                        .HasDefaultValueSql("'   '::bpchar")
                        .IsFixedLength();

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("team_name");

                    b.HasKey("TeamId", "OrganizerId", "TournamentId")
                        .HasName("teams_pk");

                    b.HasIndex("TournamentId", "OrganizerId");

                    b.HasIndex(new[] { "TeamId", "TournamentId", "TeamName" }, "teams_name_uq")
                        .IsUnique();

                    b.ToTable("teams", (string)null);
                });

            modelBuilder.Entity("ChessTourManager.DataAccess.Entities.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tournament_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OrganizerId")
                        .HasColumnType("integer")
                        .HasColumnName("organizer_id");

                    b.Property<DateOnly>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("date_create")
                        .HasDefaultValueSql("(now())::date");

                    b.Property<DateOnly>("DateLastChange")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("date_last_change")
                        .HasDefaultValueSql("(now())::date");

                    b.Property<DateOnly>("DateStart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("date_start")
                        .HasDefaultValueSql("(now())::date");

                    b.Property<int>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<bool?>("IsMixedGroups")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_mixed_groups")
                        .HasDefaultValueSql("true");

                    b.Property<int>("KindId")
                        .HasColumnType("integer")
                        .HasColumnName("kind_id");

                    b.Property<int>("MaxTeamPlayers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("max_team_players")
                        .HasDefaultValueSql("5");

                    b.Property<string>("OrganizationName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("organization_name")
                        .HasDefaultValueSql("'-'::character varying");

                    b.Property<string>("Place")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("place")
                        .HasDefaultValueSql("'-'::character varying");

                    b.Property<int>("SystemId")
                        .HasColumnType("integer")
                        .HasColumnName("system_id");

                    b.Property<TimeOnly>("TimeCreate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("time(6) without time zone")
                        .HasColumnName("time_create")
                        .HasDefaultValueSql("(now())::time(6) without time zone");

                    b.Property<TimeOnly>("TimeLastChange")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("time(6) without time zone")
                        .HasColumnName("time_last_change")
                        .HasDefaultValueSql("(now())::time(6) without time zone");

                    b.Property<TimeOnly>("TimeStart")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("time(6) without time zone")
                        .HasColumnName("time_start")
                        .HasDefaultValueSql("(now())::time(6) without time zone");

                    b.Property<string>("TournamentName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("tournament_name");

                    b.Property<int>("ToursCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tours_count")
                        .HasDefaultValueSql("7");

                    b.HasKey("Id", "OrganizerId")
                        .HasName("tournaments_pk");

                    b.HasIndex("KindId");

                    b.HasIndex("OrganizerId");

                    b.HasIndex("SystemId");

                    b.HasIndex(new[] { "Id", "OrganizerId", "TournamentName" }, "tournaments_name_uq")
                        .IsUnique();

                    b.ToTable("tournaments", (string)null);
                });

            modelBuilder.Entity("ChessTourManager.DataAccess.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("pass_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("register_date")
                        .HasDefaultValueSql("(now())::date");

                    b.Property<TimeOnly>("RegisterTime")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("time(6) without time zone")
                        .HasColumnName("register_time")
                        .HasDefaultValueSql("(now())::time(6) without time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("TournamentsLim")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tournaments_lim")
                        .HasDefaultValueSql("50");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserFirstName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("user_firstname");

                    b.Property<string>("UserLastName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("user_lastname");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<string>("UserPatronymic")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("user_patronymic")
                        .HasDefaultValueSql("'-'::character varying");

                    b.HasKey("Id")
                        .HasName("users_pk");

                    b.HasIndex(new[] { "Email" }, "users_email_uq")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ChessTourManager.DataAccess.TableViews.PlayersListView", b =>
                {
                    b.Property<char?>("Gender")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("gender");

                    b.Property<string>("GroupIdent")
                        .HasMaxLength(4)
                        .HasColumnType("character(4)")
                        .HasColumnName("group_ident")
                        .IsFixedLength();

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int?>("OrganizerId")
                        .HasColumnType("integer")
                        .HasColumnName("organizer_id");

                    b.Property<string>("PlayerAttribute")
                        .HasMaxLength(3)
                        .HasColumnType("character(3)")
                        .HasColumnName("player_attribute")
                        .IsFixedLength();

                    b.Property<int?>("PlayerBirthYear")
                        .HasColumnType("integer")
                        .HasColumnName("player_birth_year");

                    b.Property<string>("PlayerFirstName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("player_first_name");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("player_id");

                    b.Property<string>("PlayerLastName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("player_last_name");

                    b.Property<string>("TeamName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("team_name");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("integer")
                        .HasColumnName("tournament_id");

                    b.ToTable((string)null);

                    b.ToView("players_list_view", (string)null);
                });

            modelBuilder.Entity("ChessTourManager.DataAccess.TableViews.SingleRatingListView", b =>
                {
                    b.Property<int?>("DrawsCount")
                        .HasColumnType("integer")
                        .HasColumnName("draws_count");

                    b.Property<string>("GroupIdent")
                        .HasMaxLength(4)
                        .HasColumnType("character(4)")
                        .HasColumnName("group_ident")
                        .IsFixedLength();

                    b.Property<int?>("LossesCount")
                        .HasColumnType("integer")
                        .HasColumnName("losses_count");

                    b.Property<int?>("OrganizerId")
                        .HasColumnType("integer")
                        .HasColumnName("organizer_id");

                    b.Property<string>("PlayerAttribute")
                        .HasMaxLength(3)
                        .HasColumnType("character(3)")
                        .HasColumnName("player_attribute")
                        .IsFixedLength();

                    b.Property<string>("PlayerFirstName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("player_first_name");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("player_id");

                    b.Property<string>("PlayerLastName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("player_last_name");

                    b.Property<long?>("PlayerRank")
                        .HasColumnType("bigint")
                        .HasColumnName("player_rank");

                    b.Property<int?>("PointsCount")
                        .HasColumnType("integer")
                        .HasColumnName("points_count");

                    b.Property<decimal?>("RatioSum1")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("ratio_sum1");

                    b.Property<decimal?>("RatioSum2")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("ratio_sum2");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("integer")
                        .HasColumnName("tournament_id");

                    b.Property<int?>("WinsCount")
                        .HasColumnType("integer")
                        .HasColumnName("wins_count");

                    b.ToTable((string)null);

                    b.ToView("single_rating_list_view", (string)null);
                });

            modelBuilder.Entity("ChessTourManager.DataAccess.TableViews.TeamRatingListView", b =>
                {
                    b.Property<long?>("DrawsCount")
                        .HasColumnType("bigint")
                        .HasColumnName("draws_count");

                    b.Property<long?>("LossesCount")
                        .HasColumnType("bigint")
                        .HasColumnName("losses_count");

                    b.Property<int?>("OrganizerId")
                        .HasColumnType("integer")
                        .HasColumnName("organizer_id");

                    b.Property<long?>("PointsCount")
                        .HasColumnType("bigint")
                        .HasColumnName("points_count");

                    b.Property<decimal?>("RatioSum1")
                        .HasColumnType("numeric")
                        .HasColumnName("ratio_sum1");

                    b.Property<decimal?>("RatioSum2")
                        .HasColumnType("numeric")
                        .HasColumnName("ratio_sum2");

                    b.Property<string>("TeamAttribute")
                        .HasMaxLength(3)
                        .HasColumnType("character(3)")
                        .HasColumnName("team_attribute")
                        .IsFixedLength();

                    b.Property<int?>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("team_id");

                    b.Property<string>("TeamName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("team_name");

                    b.Property<long?>("TeamRank")
                        .HasColumnType("bigint")
                        .HasColumnName("team_rank");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("integer")
                        .HasColumnName("tournament_id");

                    b.Property<long?>("WinsCount")
                        .HasColumnType("bigint")
                        .HasColumnName("wins_count");

                    b.ToTable((string)null);

                    b.ToView("team_rating_list_view", (string)null);
                });

            modelBuilder.Entity("ChessTourManager.DataAccess.TableViews.TeamView", b =>
                {
                    b.Property<int?>("BoardNumber")
                        .HasColumnType("integer")
                        .HasColumnName("board_number");

                    b.Property<string>("GroupIdent")
                        .HasMaxLength(4)
                        .HasColumnType("character(4)")
                        .HasColumnName("group_ident")
                        .IsFixedLength();

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int?>("OrganizerId")
                        .HasColumnType("integer")
                        .HasColumnName("organizer_id");

                    b.Property<string>("PlayerFirstName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("player_first_name");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("player_id");

                    b.Property<string>("PlayerLastName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("player_last_name");

                    b.Property<int?>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("team_id");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("integer")
                        .HasColumnName("tournament_id");

                    b.ToTable((string)null);

                    b.ToView("team_view", (string)null);
                });

            modelBuilder.Entity("ChessTourManager.DataAccess.TableViews.TeamsListView", b =>
                {
                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int?>("OrganizerId")
                        .HasColumnType("integer")
                        .HasColumnName("organizer_id");

                    b.Property<long?>("PlayersCount")
                        .HasColumnType("bigint")
                        .HasColumnName("players_count");

                    b.Property<string>("TeamAttribute")
                        .HasMaxLength(3)
                        .HasColumnType("character(3)")
                        .HasColumnName("team_attribute")
                        .IsFixedLength();

                    b.Property<int?>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("team_id");

                    b.Property<string>("TeamName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("team_name");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("integer")
                        .HasColumnName("tournament_id");

                    b.ToTable((string)null);

                    b.ToView("teams_list_view", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("roles_pk");

                    b.HasIndex(new[] { "NormalizedName" }, "roles_name_uq")
                        .IsUnique();

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("role_claim_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("role_claims_pk");

                    b.HasIndex(new[] { "RoleId" }, "role_claims_role_id_idx");

                    b.ToTable("role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_claim_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("user_claims_pk");

                    b.HasIndex(new[] { "UserId" }, "user_claims_user_id_idx");

                    b.ToTable("user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("user_logins_pk");

                    b.HasIndex(new[] { "UserId" }, "user_logins_user_id_idx");

                    b.ToTable("user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("user_roles_pk");

                    b.HasIndex(new[] { "RoleId" }, "user_roles_role_id_idx");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("user_tokens_pk");

                    b.ToTable("user_tokens", (string)null);
                });

            modelBuilder.Entity("TournamentRatio", b =>
                {
                    b.Property<int>("TournamentId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("integer");

                    b.Property<int>("RatioId")
                        .HasColumnType("integer");

                    b.HasKey("TournamentId", "OrganizerId", "RatioId")
                        .HasName("tournament_ratios_pk");

                    b.HasIndex("RatioId");

                    b.ToTable("tournament_ratios", (string)null);
                });

            modelBuilder.Entity("ChessTourManager.DataAccess.Entities.Game", b =>
                {
                    b.HasOne("ChessTourManager.DataAccess.Entities.Player", "PlayerBlack")
                        .WithMany("WhiteGamePlayers")
                        .HasForeignKey("BlackId", "TournamentId", "OrganizerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("games_have_black_players_fk");

                    b.HasOne("ChessTourManager.DataAccess.Entities.Player", "PlayerWhite")
                        .WithMany("BlackGamePlayers")
                        .HasForeignKey("WhiteId", "TournamentId", "OrganizerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("games_have_white_players_fk");

                    b.Navigation("PlayerBlack");

                    b.Navigation("PlayerWhite");
                });

            modelBuilder.Entity("ChessTourManager.DataAccess.Entities.Group", b =>
                {
                    b.HasOne("ChessTourManager.DataAccess.Entities.Tournament", "Tournament")
                        .WithMany("Groups")
                        .HasForeignKey("TournamentId", "OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("groups_in_tournaments_fk");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("ChessTourManager.DataAccess.Entities.Player", b =>
                {
                    b.HasOne("ChessTourManager.DataAccess.Entities.Tournament", "Tournament")
                        .WithMany("Players")
                        .HasForeignKey("TournamentId", "OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("players_take_part_in_tournaments_fk");

                    b.HasOne("ChessTourManager.DataAccess.Entities.Group", "Group")
                        .WithMany("Players")
                        .HasForeignKey("GroupId", "TournamentId", "OrganizerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("players_in_groups_fk");

                    b.HasOne("ChessTourManager.DataAccess.Entities.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId", "OrganizerId", "TournamentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("players_in_teams_fk");

                    b.Navigation("Group");

                    b.Navigation("Team");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("ChessTourManager.DataAccess.Entities.Team", b =>
                {
                    b.HasOne("ChessTourManager.DataAccess.Entities.Tournament", "Tournament")
                        .WithMany("Teams")
                        .HasForeignKey("TournamentId", "OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("teams_in_tournaments_fk");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("ChessTourManager.DataAccess.Entities.Tournament", b =>
                {
                    b.HasOne("ChessTourManager.DataAccess.Entities.Kind", "Kind")
                        .WithMany("Tournaments")
                        .HasForeignKey("KindId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("tournaments_have_kinds_fk");

                    b.HasOne("ChessTourManager.DataAccess.Entities.User", "Organizer")
                        .WithMany("Tournaments")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("tournaments_have_organizers_fk");

                    b.HasOne("ChessTourManager.DataAccess.Entities.System", "System")
                        .WithMany("Tournaments")
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("tournaments_have_systems_fk");

                    b.Navigation("Kind");

                    b.Navigation("Organizer");

                    b.Navigation("System");
                });

            modelBuilder.Entity("TournamentRatio", b =>
                {
                    b.HasOne("ChessTourManager.DataAccess.Entities.Ratio", null)
                        .WithMany()
                        .HasForeignKey("RatioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("tournaments_ratios_in_ratios_fk");

                    b.HasOne("ChessTourManager.DataAccess.Entities.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentId", "OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("tournaments_ratios_in_tournaments_fk");
                });

            modelBuilder.Entity("ChessTourManager.DataAccess.Entities.Group", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("ChessTourManager.DataAccess.Entities.Kind", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("ChessTourManager.DataAccess.Entities.Player", b =>
                {
                    b.Navigation("BlackGamePlayers");

                    b.Navigation("WhiteGamePlayers");
                });

            modelBuilder.Entity("ChessTourManager.DataAccess.Entities.System", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("ChessTourManager.DataAccess.Entities.Team", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("ChessTourManager.DataAccess.Entities.Tournament", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Players");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("ChessTourManager.DataAccess.Entities.User", b =>
                {
                    b.Navigation("Tournaments");
                });
#pragma warning restore 612, 618
        }
    }
}
